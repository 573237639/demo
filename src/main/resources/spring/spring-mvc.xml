<?xml version="1.0" encoding="UTF-8"?>
<beans  
	
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xmlns:soap="http://cxf.apache.org/bindings/soap"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	
	
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx.xsd
	    http://www.springframework.org/schema/jdbc
	    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	    http://www.springframework.org/schema/cache
	    http://www.springframework.org/schema/cache/spring-cache.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util.xsd
	    http://cxf.apache.org/bindings/soap 
	    http://cxf.apache.org/schemas/configuration/soap.xsd 
	    http://cxf.apache.org/jaxws 
	    http://cxf.apache.org/schemas/jaxws.xsd">
    
    <description>Spring MVC Configuration</description>
    
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/xframe.properties" />
	<bean class="com.fabaoframework.modules.springextend.SpringContextHolder"/>
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.fabaoframework,com.fabao" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                 <property name="supportedMediaTypes">    
                    <list>                          
                        <value>text/html;charset=UTF-8</value><!-- 避免IE出现下载JSON文件的情况 -->    
                    </list>    
                </property>   
                <property name="prettyPrint" value="true"/>
                <property name="objectMapper">  
                    <bean class="com.fabaoframework.modules.mapper.JsonMapper">
                    	<property name="serializationInclusion">
                    		<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">ALWAYS</value>
                    	</property>
                    </bean>  
                </property> 
            </bean>
            <!-- 使用XML格式输出数据
            <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		        <constructor-arg>
		        	<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
				        <property name="streamDriver">
				            <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
				        </property>
				        <property name="annotatedClasses">
				            <list>
				                <value>com.thinkgem.jeesite.common.persistence.BaseEntity</value>
				            </list>
				        </property>
				    </bean>
		        </constructor-arg>
		        <property name="supportedMediaTypes" value="application/xml"></property>
			</bean>
			 -->
		</mvc:message-converters>
		<mvc:argument-resolvers>
			<bean class="com.fabaoframework.modules.web.SecureModelAttributeMethodArgumentResolver">
				<constructor-arg value="false"/>
			</bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map> 
                <entry key="xml" value="application/xml"/> 
                <entry key="json" value="application/json"/> 
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>

	<!-- 视图文件解析配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}"/>
		<property name="suffix" value="${web.view.suffix}"/>
	</bean>
	
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler/>
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/home"/>

	<!-- 登录拦截器配置 -->
	 <mvc:interceptors>
		 <mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/static/**"/>
			<bean class="com.fabao.ledger.modules.sys.intercepts.PriInterceptor"></bean>
		</mvc:interceptor> 

		<!-- 日志记录 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/static/**"/>
			<mvc:exclude-mapping path="/login"/>
			<mvc:exclude-mapping path="/logout"/> 
			<mvc:exclude-mapping path="/sys/act/noauthor"/>
			<bean class="com.fabao.ledger.modules.sys.intercepts.OpeartorLogInterceptor"></bean>
		</mvc:interceptor> 
		<!-- SSO 拦截器 -->
		 <!-- path 对所有的请求拦截使用/**，对某个模块下的请求拦截使用：/myPath/* -->
		 <mvc:interceptor>
		 <mvc:mapping path="/**" />
		 <mvc:exclude-mapping path="/static/**"/>
		<mvc:exclude-mapping path="/login"/>
		<mvc:exclude-mapping path="/logout"/> 
		<mvc:exclude-mapping path="/sys/act/noauthor"/>
		 <bean class="com.baomidou.kisso.web.interceptor.SSOSpringInterceptor" />
		 </mvc:interceptor>
	</mvc:interceptors> 
	
	<!--  kisso 注入初始化，也支持使用 web.xml 初始化 -->
	<bean id="kissoInit" class="com.baomidou.kisso.web.WebKissoConfigurer" init-method="initKisso">
		<property name="ssoPropPath" value="sso.properties" />
		<!-- 
		   此处可以注入 SSOConfig 配置属性，也可以定义自己的 kisso 插件，基础 SSOPlugin 抽象类。
		 <property name="pluginList">
		 	<list>
		 		<bean name="com.xxxx.MyPlugin">
		 	</list>
		 </property>
		 -->
	</bean>
	
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    	<property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="${web.maxUploadSize}" />  
    </bean>
    
   <jaxws:client id="taskWebservice" serviceClass="com.tepper.www.TaskWebserviceImpl" 
    address="${taskwebservice.url}"/>
    
    
<!--     要调用的工作类 -->
 <bean id="quartzJob" class="com.fabao.ledger.modules.tb.service.QuartzJob"></bean>
 <!-- 定义调用对象和调用对象的方法 -->
 <bean id="jobtask"
  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
  <!-- 调用的类 -->
  <property name="targetObject">
   <ref bean="quartzJob" />
  </property>
  <!-- 调用类中的方法 -->
  <property name="targetMethod">
   <value>work</value>
  </property>
 </bean>
 <!-- 定义触发时间 -->
 <bean id="doTime"
  class="org.springframework.scheduling.quartz.CronTriggerBean">
  <property name="jobDetail">
   <ref bean="jobtask" />
  </property>
  <!-- cron表达式 -->
  <property name="cronExpression">
   <!-- 每15分钟执行一次 -->
   <value>0 0/15 * * * ?</value>
  </property>
 </bean>
 <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
 <bean id="startQuertz" lazy-init="false" autowire="no"
  class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
  <property name="triggers">
   <list>
    <ref bean="doTime" />
   </list>
  </property>
 </bean>

</beans>